/**
 * Project Seeker API
 * Project Seeker API
 *
 * OpenAPI spec version: 1.0
 * Contact: jorgetargz@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.AddDeviceDTO
import io.swagger.client.models.ChangeUserRoleDTO
import io.swagger.client.models.CreateUserDTO
import io.swagger.client.models.ErrorDTO
import io.swagger.client.models.ModifyClientProfileDTO
import io.swagger.client.models.ModifyFreelancerProfileDTO
import io.swagger.client.models.ProfileDTO

import io.swagger.client.infrastructure.*

class UsersEndpointsApi(basePath: kotlin.String = "https://project-seeker.duckdns.org:8090") : ApiClient(basePath) {

    /**
     * Add device for notifications
     * 
     * @param body  
     * @return void
     */
    fun addOrUpdateDeviceFCMToken(body: AddDeviceDTO): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/secured/users/addDevice"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Change user role
     * 
     * @param body  
     * @return ProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun changeRole(body: ChangeUserRoleDTO): ProfileDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/secured/users/changeRole"
        )
        val response = request<ProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create user
     * 
     * @param body  
     * @return ProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createUser(body: CreateUserDTO): ProfileDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/secured/users/createUser"
        )
        val response = request<ProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete user
     * 
     * @return void
     */
    fun deleteUser(): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/secured/users/deleteUser"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get my profile
     * 
     * @return ProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getMyProfile(): ProfileDTO {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/secured/users/myProfile"
        )
        val response = request<ProfileDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get profile
     * 
     * @param id  
     * @return ProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getProfile(id: kotlin.String): ProfileDTO {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("id", listOf(id.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/secured/users/profile", query = localVariableQuery
        )
        val response = request<ProfileDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify client profile
     * 
     * @param body  
     * @return ProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyClientProfile(body: ModifyClientProfileDTO): ProfileDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/secured/users/modifyClientProfile"
        )
        val response = request<ProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify freelancer profile
     * 
     * @param body  
     * @return ProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyFreelancerProfile(body: ModifyFreelancerProfileDTO): ProfileDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/secured/users/modifyFreelancerProfile"
        )
        val response = request<ProfileDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
