/**
 * Project Seeker API
 * Project Seeker API
 *
 * OpenAPI spec version: 1.0
 * Contact: jorgetargz@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorDTO
import io.swagger.client.models.ProfileDTO

import io.swagger.client.infrastructure.*

class SuperAdminEndpointsApi(basePath: kotlin.String = "https://project-seeker.duckdns.org:8090") : ApiClient(basePath) {

    /**
     * Disable user
     * 
     * @param email  
     * @return void
     */
    fun disableUser(email: kotlin.String): Unit {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("email", listOf(email.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/secured/super/disable-user", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Enable user
     * 
     * @param email  
     * @return void
     */
    fun enableUser(email: kotlin.String): Unit {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("email", listOf(email.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/secured/super/enable-user", query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get user by email
     * 
     * @param email  
     * @return ProfileDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserByEmail(email: kotlin.String): ProfileDTO {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("email", listOf(email.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/secured/super/user", query = localVariableQuery
        )
        val response = request<ProfileDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProfileDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
