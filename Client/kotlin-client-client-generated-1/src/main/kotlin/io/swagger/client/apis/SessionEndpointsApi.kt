/**
 * Project Seeker API
 * Project Seeker API
 *
 * OpenAPI spec version: 1.0
 * Contact: jorgetargz@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorDTO

import io.swagger.client.infrastructure.*

class SessionEndpointsApi(basePath: kotlin.String = "https://project-seeker.duckdns.org:8090") : ApiClient(basePath) {

    /**
     * Login user with firebase token and create session cookie
     * 
     * @return void
     */
    fun sessionLogin(): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/session/login"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Logout user and delete session cookie
     * 
     * @return void
     */
    fun sessionLogout(): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/session/logout"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Logout user everywhere and delete session cookie
     * 
     * @return void
     */
    fun sessionLogoutEverywhere(): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/session/logout-everywhere"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
