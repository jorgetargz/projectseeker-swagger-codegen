/* 
 * Project Seeker API
 *
 * Project Seeker API
 *
 * OpenAPI spec version: 1.0
 * Contact: jorgetargz@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProjectsEndpointsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign freelancer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProjectInfoDTO</returns>
        ProjectInfoDTO AssignFreelancer (AssignProjectDTO body);

        /// <summary>
        /// Assign freelancer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        ApiResponse<ProjectInfoDTO> AssignFreelancerWithHttpInfo (AssignProjectDTO body);
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProjectInfoDTO</returns>
        ProjectInfoDTO CreateProject (CreateProjectDTO body);

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        ApiResponse<ProjectInfoDTO> CreateProjectWithHttpInfo (CreateProjectDTO body);
        /// <summary>
        /// Finish project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProjectInfoDTO</returns>
        ProjectInfoDTO FinishProject (string id);

        /// <summary>
        /// Finish project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        ApiResponse<ProjectInfoDTO> FinishProjectWithHttpInfo (string id);
        /// <summary>
        /// Get the projects I have created that are in progress
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        List<ProjectInfoDTO> GetInProgressProjectsByClientId ();

        /// <summary>
        /// Get the projects I have created that are in progress
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        ApiResponse<List<ProjectInfoDTO>> GetInProgressProjectsByClientIdWithHttpInfo ();
        /// <summary>
        /// Get all open projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        List<ProjectInfoDTO> GetOpenProjects ();

        /// <summary>
        /// Get all open projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        ApiResponse<List<ProjectInfoDTO>> GetOpenProjectsWithHttpInfo ();
        /// <summary>
        /// Get the projects I have created that are open
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        List<ProjectInfoDTO> GetOpenProjectsByClient ();

        /// <summary>
        /// Get the projects I have created that are open
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        ApiResponse<List<ProjectInfoDTO>> GetOpenProjectsByClientWithHttpInfo ();
        /// <summary>
        /// Get open projects by skills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        List<ProjectInfoDTO> GetOpenProjectsBySkills (List<string> body);

        /// <summary>
        /// Get open projects by skills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        ApiResponse<List<ProjectInfoDTO>> GetOpenProjectsBySkillsWithHttpInfo (List<string> body);
        /// <summary>
        /// Get project info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProjectInfoDTO</returns>
        ProjectInfoDTO GetPrjectInfo (string id);

        /// <summary>
        /// Get project info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        ApiResponse<ProjectInfoDTO> GetPrjectInfoWithHttpInfo (string id);
        /// <summary>
        /// Get projects assigned to me
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        List<ProjectInfoDTO> GetProjectsByAssignedFreelancer ();

        /// <summary>
        /// Get projects assigned to me
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        ApiResponse<List<ProjectInfoDTO>> GetProjectsByAssignedFreelancerWithHttpInfo ();
        /// <summary>
        /// Get the projects I have created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        List<ProjectInfoDTO> GetProjectsByClient ();

        /// <summary>
        /// Get the projects I have created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        ApiResponse<List<ProjectInfoDTO>> GetProjectsByClientWithHttpInfo ();
        /// <summary>
        /// Get projects where I have made an offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        List<ProjectInfoDTO> GetProjectsByOfferFreelancer ();

        /// <summary>
        /// Get projects where I have made an offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        ApiResponse<List<ProjectInfoDTO>> GetProjectsByOfferFreelancerWithHttpInfo ();
        /// <summary>
        /// Submit offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProjectInfoDTO</returns>
        ProjectInfoDTO SubmitOffer (SubmitOfferDTO body);

        /// <summary>
        /// Submit offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        ApiResponse<ProjectInfoDTO> SubmitOfferWithHttpInfo (SubmitOfferDTO body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign freelancer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        System.Threading.Tasks.Task<ProjectInfoDTO> AssignFreelancerAsync (AssignProjectDTO body);

        /// <summary>
        /// Assign freelancer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> AssignFreelancerAsyncWithHttpInfo (AssignProjectDTO body);
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        System.Threading.Tasks.Task<ProjectInfoDTO> CreateProjectAsync (CreateProjectDTO body);

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> CreateProjectAsyncWithHttpInfo (CreateProjectDTO body);
        /// <summary>
        /// Finish project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        System.Threading.Tasks.Task<ProjectInfoDTO> FinishProjectAsync (string id);

        /// <summary>
        /// Finish project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> FinishProjectAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get the projects I have created that are in progress
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetInProgressProjectsByClientIdAsync ();

        /// <summary>
        /// Get the projects I have created that are in progress
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetInProgressProjectsByClientIdAsyncWithHttpInfo ();
        /// <summary>
        /// Get all open projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetOpenProjectsAsync ();

        /// <summary>
        /// Get all open projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetOpenProjectsAsyncWithHttpInfo ();
        /// <summary>
        /// Get the projects I have created that are open
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetOpenProjectsByClientAsync ();

        /// <summary>
        /// Get the projects I have created that are open
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetOpenProjectsByClientAsyncWithHttpInfo ();
        /// <summary>
        /// Get open projects by skills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetOpenProjectsBySkillsAsync (List<string> body);

        /// <summary>
        /// Get open projects by skills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetOpenProjectsBySkillsAsyncWithHttpInfo (List<string> body);
        /// <summary>
        /// Get project info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        System.Threading.Tasks.Task<ProjectInfoDTO> GetPrjectInfoAsync (string id);

        /// <summary>
        /// Get project info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> GetPrjectInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get projects assigned to me
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetProjectsByAssignedFreelancerAsync ();

        /// <summary>
        /// Get projects assigned to me
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetProjectsByAssignedFreelancerAsyncWithHttpInfo ();
        /// <summary>
        /// Get the projects I have created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetProjectsByClientAsync ();

        /// <summary>
        /// Get the projects I have created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetProjectsByClientAsyncWithHttpInfo ();
        /// <summary>
        /// Get projects where I have made an offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetProjectsByOfferFreelancerAsync ();

        /// <summary>
        /// Get projects where I have made an offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetProjectsByOfferFreelancerAsyncWithHttpInfo ();
        /// <summary>
        /// Submit offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        System.Threading.Tasks.Task<ProjectInfoDTO> SubmitOfferAsync (SubmitOfferDTO body);

        /// <summary>
        /// Submit offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> SubmitOfferAsyncWithHttpInfo (SubmitOfferDTO body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProjectsEndpointsApi : IProjectsEndpointsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsEndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsEndpointsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsEndpointsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProjectsEndpointsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsEndpointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsEndpointsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign freelancer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProjectInfoDTO</returns>
        public ProjectInfoDTO AssignFreelancer (AssignProjectDTO body)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = AssignFreelancerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign freelancer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        public ApiResponse< ProjectInfoDTO > AssignFreelancerWithHttpInfo (AssignProjectDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsEndpointsApi->AssignFreelancer");

            var localVarPath = "/api/secured/projects/client/assignFreelancer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignFreelancer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Assign freelancer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        public async System.Threading.Tasks.Task<ProjectInfoDTO> AssignFreelancerAsync (AssignProjectDTO body)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = await AssignFreelancerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign freelancer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> AssignFreelancerAsyncWithHttpInfo (AssignProjectDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsEndpointsApi->AssignFreelancer");

            var localVarPath = "/api/secured/projects/client/assignFreelancer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignFreelancer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Create project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProjectInfoDTO</returns>
        public ProjectInfoDTO CreateProject (CreateProjectDTO body)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = CreateProjectWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        public ApiResponse< ProjectInfoDTO > CreateProjectWithHttpInfo (CreateProjectDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsEndpointsApi->CreateProject");

            var localVarPath = "/api/secured/projects/client/createProject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Create project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        public async System.Threading.Tasks.Task<ProjectInfoDTO> CreateProjectAsync (CreateProjectDTO body)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = await CreateProjectAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> CreateProjectAsyncWithHttpInfo (CreateProjectDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsEndpointsApi->CreateProject");

            var localVarPath = "/api/secured/projects/client/createProject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Finish project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProjectInfoDTO</returns>
        public ProjectInfoDTO FinishProject (string id)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = FinishProjectWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finish project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        public ApiResponse< ProjectInfoDTO > FinishProjectWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectsEndpointsApi->FinishProject");

            var localVarPath = "/api/secured/projects/client/finishProject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinishProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Finish project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        public async System.Threading.Tasks.Task<ProjectInfoDTO> FinishProjectAsync (string id)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = await FinishProjectAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finish project 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> FinishProjectAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectsEndpointsApi->FinishProject");

            var localVarPath = "/api/secured/projects/client/finishProject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinishProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Get the projects I have created that are in progress 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        public List<ProjectInfoDTO> GetInProgressProjectsByClientId ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = GetInProgressProjectsByClientIdWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the projects I have created that are in progress 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        public ApiResponse< List<ProjectInfoDTO> > GetInProgressProjectsByClientIdWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/client/getMyInProgressProjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInProgressProjectsByClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get the projects I have created that are in progress 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetInProgressProjectsByClientIdAsync ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = await GetInProgressProjectsByClientIdAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the projects I have created that are in progress 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetInProgressProjectsByClientIdAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/client/getMyInProgressProjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInProgressProjectsByClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get all open projects 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        public List<ProjectInfoDTO> GetOpenProjects ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = GetOpenProjectsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all open projects 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        public ApiResponse< List<ProjectInfoDTO> > GetOpenProjectsWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/openProjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get all open projects 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetOpenProjectsAsync ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = await GetOpenProjectsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all open projects 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetOpenProjectsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/openProjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get the projects I have created that are open 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        public List<ProjectInfoDTO> GetOpenProjectsByClient ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = GetOpenProjectsByClientWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the projects I have created that are open 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        public ApiResponse< List<ProjectInfoDTO> > GetOpenProjectsByClientWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/client/getMyOpenProjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenProjectsByClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get the projects I have created that are open 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetOpenProjectsByClientAsync ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = await GetOpenProjectsByClientAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the projects I have created that are open 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetOpenProjectsByClientAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/client/getMyOpenProjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenProjectsByClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get open projects by skills 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        public List<ProjectInfoDTO> GetOpenProjectsBySkills (List<string> body)
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = GetOpenProjectsBySkillsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get open projects by skills 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        public ApiResponse< List<ProjectInfoDTO> > GetOpenProjectsBySkillsWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsEndpointsApi->GetOpenProjectsBySkills");

            var localVarPath = "/api/secured/projects/openProjectsBySkills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenProjectsBySkills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get open projects by skills 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetOpenProjectsBySkillsAsync (List<string> body)
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = await GetOpenProjectsBySkillsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get open projects by skills 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetOpenProjectsBySkillsAsyncWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsEndpointsApi->GetOpenProjectsBySkills");

            var localVarPath = "/api/secured/projects/openProjectsBySkills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenProjectsBySkills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get project info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ProjectInfoDTO</returns>
        public ProjectInfoDTO GetPrjectInfo (string id)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = GetPrjectInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        public ApiResponse< ProjectInfoDTO > GetPrjectInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectsEndpointsApi->GetPrjectInfo");

            var localVarPath = "/api/secured/projects/projectInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrjectInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Get project info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        public async System.Threading.Tasks.Task<ProjectInfoDTO> GetPrjectInfoAsync (string id)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = await GetPrjectInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> GetPrjectInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectsEndpointsApi->GetPrjectInfo");

            var localVarPath = "/api/secured/projects/projectInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrjectInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Get projects assigned to me 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        public List<ProjectInfoDTO> GetProjectsByAssignedFreelancer ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = GetProjectsByAssignedFreelancerWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get projects assigned to me 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        public ApiResponse< List<ProjectInfoDTO> > GetProjectsByAssignedFreelancerWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/freelancer/getProjectsAssignedToMe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsByAssignedFreelancer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get projects assigned to me 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetProjectsByAssignedFreelancerAsync ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = await GetProjectsByAssignedFreelancerAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get projects assigned to me 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetProjectsByAssignedFreelancerAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/freelancer/getProjectsAssignedToMe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsByAssignedFreelancer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get the projects I have created 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        public List<ProjectInfoDTO> GetProjectsByClient ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = GetProjectsByClientWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the projects I have created 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        public ApiResponse< List<ProjectInfoDTO> > GetProjectsByClientWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/client/myProjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsByClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get the projects I have created 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetProjectsByClientAsync ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = await GetProjectsByClientAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the projects I have created 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetProjectsByClientAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/client/myProjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsByClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get projects where I have made an offer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProjectInfoDTO&gt;</returns>
        public List<ProjectInfoDTO> GetProjectsByOfferFreelancer ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = GetProjectsByOfferFreelancerWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get projects where I have made an offer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProjectInfoDTO&gt;</returns>
        public ApiResponse< List<ProjectInfoDTO> > GetProjectsByOfferFreelancerWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/freelancer/getProjectsWhereIHaveOffer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsByOfferFreelancer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Get projects where I have made an offer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProjectInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectInfoDTO>> GetProjectsByOfferFreelancerAsync ()
        {
             ApiResponse<List<ProjectInfoDTO>> localVarResponse = await GetProjectsByOfferFreelancerAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get projects where I have made an offer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProjectInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectInfoDTO>>> GetProjectsByOfferFreelancerAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/secured/projects/freelancer/getProjectsWhereIHaveOffer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsByOfferFreelancer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectInfoDTO>)));
        }

        /// <summary>
        /// Submit offer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProjectInfoDTO</returns>
        public ProjectInfoDTO SubmitOffer (SubmitOfferDTO body)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = SubmitOfferWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit offer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProjectInfoDTO</returns>
        public ApiResponse< ProjectInfoDTO > SubmitOfferWithHttpInfo (SubmitOfferDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsEndpointsApi->SubmitOffer");

            var localVarPath = "/api/secured/projects/freelancer/submitOffer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

        /// <summary>
        /// Submit offer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProjectInfoDTO</returns>
        public async System.Threading.Tasks.Task<ProjectInfoDTO> SubmitOfferAsync (SubmitOfferDTO body)
        {
             ApiResponse<ProjectInfoDTO> localVarResponse = await SubmitOfferAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit offer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProjectInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectInfoDTO>> SubmitOfferAsyncWithHttpInfo (SubmitOfferDTO body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsEndpointsApi->SubmitOffer");

            var localVarPath = "/api/secured/projects/freelancer/submitOffer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectInfoDTO)));
        }

    }
}
