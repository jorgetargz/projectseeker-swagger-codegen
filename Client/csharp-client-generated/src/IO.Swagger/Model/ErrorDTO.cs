/* 
 * Project Seeker API
 *
 * Project Seeker API
 *
 * OpenAPI spec version: 1.0
 * Contact: jorgetargz@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ErrorDTO
    /// </summary>
    [DataContract]
        public partial class ErrorDTO :  IEquatable<ErrorDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDTO" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="httpErrorCode">httpErrorCode.</param>
        /// <param name="firebaseError">firebaseError.</param>
        /// <param name="message">message.</param>
        /// <param name="description">description.</param>
        public ErrorDTO(DateTime? timestamp = default(DateTime?), int? httpErrorCode = default(int?), string firebaseError = default(string), string message = default(string), string description = default(string))
        {
            this.Timestamp = timestamp;
            this.HttpErrorCode = httpErrorCode;
            this.FirebaseError = firebaseError;
            this.Message = message;
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets HttpErrorCode
        /// </summary>
        [DataMember(Name="httpErrorCode", EmitDefaultValue=false)]
        public int? HttpErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets FirebaseError
        /// </summary>
        [DataMember(Name="firebaseError", EmitDefaultValue=false)]
        public string FirebaseError { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorDTO {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  HttpErrorCode: ").Append(HttpErrorCode).Append("\n");
            sb.Append("  FirebaseError: ").Append(FirebaseError).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorDTO);
        }

        /// <summary>
        /// Returns true if ErrorDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.HttpErrorCode == input.HttpErrorCode ||
                    (this.HttpErrorCode != null &&
                    this.HttpErrorCode.Equals(input.HttpErrorCode))
                ) && 
                (
                    this.FirebaseError == input.FirebaseError ||
                    (this.FirebaseError != null &&
                    this.FirebaseError.Equals(input.FirebaseError))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.HttpErrorCode != null)
                    hashCode = hashCode * 59 + this.HttpErrorCode.GetHashCode();
                if (this.FirebaseError != null)
                    hashCode = hashCode * 59 + this.FirebaseError.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
