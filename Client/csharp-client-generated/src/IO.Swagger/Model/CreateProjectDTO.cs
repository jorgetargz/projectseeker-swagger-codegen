/* 
 * Project Seeker API
 *
 * Project Seeker API
 *
 * OpenAPI spec version: 1.0
 * Contact: jorgetargz@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateProjectDTO
    /// </summary>
    [DataContract]
        public partial class CreateProjectDTO :  IEquatable<CreateProjectDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProjectDTO" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="skills">skills.</param>
        /// <param name="minBudget">minBudget.</param>
        /// <param name="maxBudget">maxBudget.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="deadlineDate">deadlineDate.</param>
        public CreateProjectDTO(string title = default(string), string description = default(string), List<string> skills = default(List<string>), double? minBudget = default(double?), double? maxBudget = default(double?), DateTime? startDate = default(DateTime?), DateTime? deadlineDate = default(DateTime?))
        {
            this.Title = title;
            this.Description = description;
            this.Skills = skills;
            this.MinBudget = minBudget;
            this.MaxBudget = maxBudget;
            this.StartDate = startDate;
            this.DeadlineDate = deadlineDate;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Skills
        /// </summary>
        [DataMember(Name="skills", EmitDefaultValue=false)]
        public List<string> Skills { get; set; }

        /// <summary>
        /// Gets or Sets MinBudget
        /// </summary>
        [DataMember(Name="minBudget", EmitDefaultValue=false)]
        public double? MinBudget { get; set; }

        /// <summary>
        /// Gets or Sets MaxBudget
        /// </summary>
        [DataMember(Name="maxBudget", EmitDefaultValue=false)]
        public double? MaxBudget { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets DeadlineDate
        /// </summary>
        [DataMember(Name="deadlineDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DeadlineDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateProjectDTO {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Skills: ").Append(Skills).Append("\n");
            sb.Append("  MinBudget: ").Append(MinBudget).Append("\n");
            sb.Append("  MaxBudget: ").Append(MaxBudget).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  DeadlineDate: ").Append(DeadlineDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateProjectDTO);
        }

        /// <summary>
        /// Returns true if CreateProjectDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateProjectDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateProjectDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Skills == input.Skills ||
                    this.Skills != null &&
                    input.Skills != null &&
                    this.Skills.SequenceEqual(input.Skills)
                ) && 
                (
                    this.MinBudget == input.MinBudget ||
                    (this.MinBudget != null &&
                    this.MinBudget.Equals(input.MinBudget))
                ) && 
                (
                    this.MaxBudget == input.MaxBudget ||
                    (this.MaxBudget != null &&
                    this.MaxBudget.Equals(input.MaxBudget))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.DeadlineDate == input.DeadlineDate ||
                    (this.DeadlineDate != null &&
                    this.DeadlineDate.Equals(input.DeadlineDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Skills != null)
                    hashCode = hashCode * 59 + this.Skills.GetHashCode();
                if (this.MinBudget != null)
                    hashCode = hashCode * 59 + this.MinBudget.GetHashCode();
                if (this.MaxBudget != null)
                    hashCode = hashCode * 59 + this.MaxBudget.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.DeadlineDate != null)
                    hashCode = hashCode * 59 + this.DeadlineDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
