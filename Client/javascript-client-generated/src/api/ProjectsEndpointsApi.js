/*
 * Project Seeker API
 * Project Seeker API
 *
 * OpenAPI spec version: 1.0
 * Contact: jorgetargz@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AssignProjectDTO} from '../model/AssignProjectDTO';
import {CreateProjectDTO} from '../model/CreateProjectDTO';
import {ErrorDTO} from '../model/ErrorDTO';
import {ProjectInfoDTO} from '../model/ProjectInfoDTO';
import {SubmitOfferDTO} from '../model/SubmitOfferDTO';

/**
* ProjectsEndpoints service.
* @module api/ProjectsEndpointsApi
* @version 1.0
*/
export class ProjectsEndpointsApi {

    /**
    * Constructs a new ProjectsEndpointsApi. 
    * @alias module:api/ProjectsEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the assignFreelancer operation.
     * @callback moduleapi/ProjectsEndpointsApi~assignFreelancerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInfoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign freelancer
     * @param {module:model/AssignProjectDTO} body 
     * @param {module:api/ProjectsEndpointsApi~assignFreelancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    assignFreelancer(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assignFreelancer");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProjectInfoDTO;

      return this.apiClient.callApi(
        '/api/secured/projects/client/assignFreelancer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createProject operation.
     * @callback moduleapi/ProjectsEndpointsApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInfoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project
     * @param {module:model/CreateProjectDTO} body 
     * @param {module:api/ProjectsEndpointsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createProject(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProject");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProjectInfoDTO;

      return this.apiClient.callApi(
        '/api/secured/projects/client/createProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the finishProject operation.
     * @callback moduleapi/ProjectsEndpointsApi~finishProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInfoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finish project
     * @param {String} id 
     * @param {module:api/ProjectsEndpointsApi~finishProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    finishProject(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling finishProject");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProjectInfoDTO;

      return this.apiClient.callApi(
        '/api/secured/projects/client/finishProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInProgressProjectsByClientId operation.
     * @callback moduleapi/ProjectsEndpointsApi~getInProgressProjectsByClientIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInfoDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the projects I have created that are in progress
     * @param {module:api/ProjectsEndpointsApi~getInProgressProjectsByClientIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInProgressProjectsByClientId(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ProjectInfoDTO];

      return this.apiClient.callApi(
        '/api/secured/projects/client/getMyInProgressProjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOpenProjects operation.
     * @callback moduleapi/ProjectsEndpointsApi~getOpenProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInfoDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all open projects
     * @param {module:api/ProjectsEndpointsApi~getOpenProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOpenProjects(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ProjectInfoDTO];

      return this.apiClient.callApi(
        '/api/secured/projects/openProjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOpenProjectsByClient operation.
     * @callback moduleapi/ProjectsEndpointsApi~getOpenProjectsByClientCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInfoDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the projects I have created that are open
     * @param {module:api/ProjectsEndpointsApi~getOpenProjectsByClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOpenProjectsByClient(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ProjectInfoDTO];

      return this.apiClient.callApi(
        '/api/secured/projects/client/getMyOpenProjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOpenProjectsBySkills operation.
     * @callback moduleapi/ProjectsEndpointsApi~getOpenProjectsBySkillsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInfoDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get open projects by skills
     * @param {Array.<String>} body 
     * @param {module:api/ProjectsEndpointsApi~getOpenProjectsBySkillsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOpenProjectsBySkills(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getOpenProjectsBySkills");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = [ProjectInfoDTO];

      return this.apiClient.callApi(
        '/api/secured/projects/openProjectsBySkills', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPrjectInfo operation.
     * @callback moduleapi/ProjectsEndpointsApi~getPrjectInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInfoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project info
     * @param {String} id 
     * @param {module:api/ProjectsEndpointsApi~getPrjectInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPrjectInfo(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPrjectInfo");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProjectInfoDTO;

      return this.apiClient.callApi(
        '/api/secured/projects/projectInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProjectsByAssignedFreelancer operation.
     * @callback moduleapi/ProjectsEndpointsApi~getProjectsByAssignedFreelancerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInfoDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects assigned to me
     * @param {module:api/ProjectsEndpointsApi~getProjectsByAssignedFreelancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProjectsByAssignedFreelancer(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ProjectInfoDTO];

      return this.apiClient.callApi(
        '/api/secured/projects/freelancer/getProjectsAssignedToMe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProjectsByClient operation.
     * @callback moduleapi/ProjectsEndpointsApi~getProjectsByClientCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInfoDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the projects I have created
     * @param {module:api/ProjectsEndpointsApi~getProjectsByClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProjectsByClient(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ProjectInfoDTO];

      return this.apiClient.callApi(
        '/api/secured/projects/client/myProjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProjectsByOfferFreelancer operation.
     * @callback moduleapi/ProjectsEndpointsApi~getProjectsByOfferFreelancerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInfoDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects where I have made an offer
     * @param {module:api/ProjectsEndpointsApi~getProjectsByOfferFreelancerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProjectsByOfferFreelancer(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ProjectInfoDTO];

      return this.apiClient.callApi(
        '/api/secured/projects/freelancer/getProjectsWhereIHaveOffer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitOffer operation.
     * @callback moduleapi/ProjectsEndpointsApi~submitOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInfoDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit offer
     * @param {module:model/SubmitOfferDTO} body 
     * @param {module:api/ProjectsEndpointsApi~submitOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitOffer(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling submitOffer");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProjectInfoDTO;

      return this.apiClient.callApi(
        '/api/secured/projects/freelancer/submitOffer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}