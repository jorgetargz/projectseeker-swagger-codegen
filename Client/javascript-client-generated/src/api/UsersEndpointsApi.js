/*
 * Project Seeker API
 * Project Seeker API
 *
 * OpenAPI spec version: 1.0
 * Contact: jorgetargz@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AddDeviceDTO} from '../model/AddDeviceDTO';
import {ChangeUserRoleDTO} from '../model/ChangeUserRoleDTO';
import {CreateUserDTO} from '../model/CreateUserDTO';
import {ErrorDTO} from '../model/ErrorDTO';
import {ModifyClientProfileDTO} from '../model/ModifyClientProfileDTO';
import {ModifyFreelancerProfileDTO} from '../model/ModifyFreelancerProfileDTO';
import {ProfileDTO} from '../model/ProfileDTO';

/**
* UsersEndpoints service.
* @module api/UsersEndpointsApi
* @version 1.0
*/
export class UsersEndpointsApi {

    /**
    * Constructs a new UsersEndpointsApi. 
    * @alias module:api/UsersEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addOrUpdateDeviceFCMToken operation.
     * @callback moduleapi/UsersEndpointsApi~addOrUpdateDeviceFCMTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add device for notifications
     * @param {module:model/AddDeviceDTO} body 
     * @param {module:api/UsersEndpointsApi~addOrUpdateDeviceFCMTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addOrUpdateDeviceFCMToken(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addOrUpdateDeviceFCMToken");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/secured/users/addDevice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the changeRole operation.
     * @callback moduleapi/UsersEndpointsApi~changeRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user role
     * @param {module:model/ChangeUserRoleDTO} body 
     * @param {module:api/UsersEndpointsApi~changeRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    changeRole(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling changeRole");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProfileDTO;

      return this.apiClient.callApi(
        '/api/secured/users/changeRole', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createUser operation.
     * @callback moduleapi/UsersEndpointsApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * @param {module:model/CreateUserDTO} body 
     * @param {module:api/UsersEndpointsApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createUser(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUser");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProfileDTO;

      return this.apiClient.callApi(
        '/api/secured/users/createUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback moduleapi/UsersEndpointsApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user
     * @param {module:api/UsersEndpointsApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/secured/users/deleteUser', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMyProfile operation.
     * @callback moduleapi/UsersEndpointsApi~getMyProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get my profile
     * @param {module:api/UsersEndpointsApi~getMyProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMyProfile(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProfileDTO;

      return this.apiClient.callApi(
        '/api/secured/users/myProfile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProfile operation.
     * @callback moduleapi/UsersEndpointsApi~getProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile
     * @param {String} id 
     * @param {module:api/UsersEndpointsApi~getProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProfile(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProfile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProfileDTO;

      return this.apiClient.callApi(
        '/api/secured/users/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modifyClientProfile operation.
     * @callback moduleapi/UsersEndpointsApi~modifyClientProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify client profile
     * @param {module:model/ModifyClientProfileDTO} body 
     * @param {module:api/UsersEndpointsApi~modifyClientProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    modifyClientProfile(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modifyClientProfile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProfileDTO;

      return this.apiClient.callApi(
        '/api/secured/users/modifyClientProfile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modifyFreelancerProfile operation.
     * @callback moduleapi/UsersEndpointsApi~modifyFreelancerProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify freelancer profile
     * @param {module:model/ModifyFreelancerProfileDTO} body 
     * @param {module:api/UsersEndpointsApi~modifyFreelancerProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    modifyFreelancerProfile(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modifyFreelancerProfile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ProfileDTO;

      return this.apiClient.callApi(
        '/api/secured/users/modifyFreelancerProfile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}