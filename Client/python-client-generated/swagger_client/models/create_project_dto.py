# coding: utf-8

"""
    Project Seeker API

    Project Seeker API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: jorgetargz@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateProjectDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'skills': 'list[str]',
        'min_budget': 'float',
        'max_budget': 'float',
        'start_date': 'date',
        'deadline_date': 'date'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'skills': 'skills',
        'min_budget': 'minBudget',
        'max_budget': 'maxBudget',
        'start_date': 'startDate',
        'deadline_date': 'deadlineDate'
    }

    def __init__(self, title=None, description=None, skills=None, min_budget=None, max_budget=None, start_date=None, deadline_date=None):  # noqa: E501
        """CreateProjectDTO - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._description = None
        self._skills = None
        self._min_budget = None
        self._max_budget = None
        self._start_date = None
        self._deadline_date = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if skills is not None:
            self.skills = skills
        if min_budget is not None:
            self.min_budget = min_budget
        if max_budget is not None:
            self.max_budget = max_budget
        if start_date is not None:
            self.start_date = start_date
        if deadline_date is not None:
            self.deadline_date = deadline_date

    @property
    def title(self):
        """Gets the title of this CreateProjectDTO.  # noqa: E501


        :return: The title of this CreateProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateProjectDTO.


        :param title: The title of this CreateProjectDTO.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this CreateProjectDTO.  # noqa: E501


        :return: The description of this CreateProjectDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateProjectDTO.


        :param description: The description of this CreateProjectDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def skills(self):
        """Gets the skills of this CreateProjectDTO.  # noqa: E501


        :return: The skills of this CreateProjectDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this CreateProjectDTO.


        :param skills: The skills of this CreateProjectDTO.  # noqa: E501
        :type: list[str]
        """

        self._skills = skills

    @property
    def min_budget(self):
        """Gets the min_budget of this CreateProjectDTO.  # noqa: E501


        :return: The min_budget of this CreateProjectDTO.  # noqa: E501
        :rtype: float
        """
        return self._min_budget

    @min_budget.setter
    def min_budget(self, min_budget):
        """Sets the min_budget of this CreateProjectDTO.


        :param min_budget: The min_budget of this CreateProjectDTO.  # noqa: E501
        :type: float
        """

        self._min_budget = min_budget

    @property
    def max_budget(self):
        """Gets the max_budget of this CreateProjectDTO.  # noqa: E501


        :return: The max_budget of this CreateProjectDTO.  # noqa: E501
        :rtype: float
        """
        return self._max_budget

    @max_budget.setter
    def max_budget(self, max_budget):
        """Sets the max_budget of this CreateProjectDTO.


        :param max_budget: The max_budget of this CreateProjectDTO.  # noqa: E501
        :type: float
        """

        self._max_budget = max_budget

    @property
    def start_date(self):
        """Gets the start_date of this CreateProjectDTO.  # noqa: E501


        :return: The start_date of this CreateProjectDTO.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateProjectDTO.


        :param start_date: The start_date of this CreateProjectDTO.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def deadline_date(self):
        """Gets the deadline_date of this CreateProjectDTO.  # noqa: E501


        :return: The deadline_date of this CreateProjectDTO.  # noqa: E501
        :rtype: date
        """
        return self._deadline_date

    @deadline_date.setter
    def deadline_date(self, deadline_date):
        """Sets the deadline_date of this CreateProjectDTO.


        :param deadline_date: The deadline_date of this CreateProjectDTO.  # noqa: E501
        :type: date
        """

        self._deadline_date = deadline_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateProjectDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateProjectDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
