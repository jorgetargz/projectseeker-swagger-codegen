/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AddDeviceDTO;
import io.swagger.model.AssignProjectDTO;
import io.swagger.model.ChangeUserRoleDTO;
import io.swagger.model.CreateProjectDTO;
import io.swagger.model.CreateUserDTO;
import io.swagger.model.ErrorDTO;
import io.swagger.model.ModifyClientProfileDTO;
import io.swagger.model.ModifyFreelancerProfileDTO;
import io.swagger.model.ProfileDTO;
import io.swagger.model.ProjectInfoDTO;
import io.swagger.model.SubmitOfferDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-26T20:13:25.761825281Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "Add device for notifications", description = "", tags={ "Users Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/users/addDevice",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addOrUpdateDeviceFCMToken(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AddDeviceDTO body);


    @Operation(summary = "Assign freelancer", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProjectInfoDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/client/assignFreelancer",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ProjectInfoDTO> assignFreelancer(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AssignProjectDTO body);


    @Operation(summary = "Change user role", description = "", tags={ "Users Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProfileDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/users/changeRole",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ProfileDTO> changeRole(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ChangeUserRoleDTO body);


    @Operation(summary = "Create project", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProjectInfoDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/client/createProject",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ProjectInfoDTO> createProject(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateProjectDTO body);


    @Operation(summary = "Create user", description = "", tags={ "Users Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProfileDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/users/createUser",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ProfileDTO> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateUserDTO body);


    @Operation(summary = "Delete user", description = "", tags={ "Users Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/users/deleteUser",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser();


    @Operation(summary = "Disable user", description = "", tags={ "Super Admin Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/super/disable-user",
        produces = { "*/*" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> disableUser(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "email", required = true) String email);


    @Operation(summary = "Enable user", description = "", tags={ "Super Admin Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/super/enable-user",
        produces = { "*/*" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> enableUser(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "email", required = true) String email);


    @Operation(summary = "Finish project", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProjectInfoDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/client/finishProject",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<ProjectInfoDTO> finishProject(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "Get the projects I have created that are in progress", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ProjectInfoDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/client/getMyInProgressProjects",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProjectInfoDTO>> getInProgressProjectsByClientId();


    @Operation(summary = "Get my profile", description = "", tags={ "Users Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProfileDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/users/myProfile",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProfileDTO> getMyProfile();


    @Operation(summary = "Get all open projects", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ProjectInfoDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/openProjects",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProjectInfoDTO>> getOpenProjects();


    @Operation(summary = "Get the projects I have created that are open", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ProjectInfoDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/client/getMyOpenProjects",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProjectInfoDTO>> getOpenProjectsByClient();


    @Operation(summary = "Get open projects by skills", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ProjectInfoDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/openProjectsBySkills",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<ProjectInfoDTO>> getOpenProjectsBySkills(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody List<String> body);


    @Operation(summary = "Get project info", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProjectInfoDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/projectInfo",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProjectInfoDTO> getPrjectInfo(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "Get profile", description = "", tags={ "Users Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProfileDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/users/profile",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProfileDTO> getProfile(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "Get projects assigned to me", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ProjectInfoDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/freelancer/getProjectsAssignedToMe",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProjectInfoDTO>> getProjectsByAssignedFreelancer();


    @Operation(summary = "Get the projects I have created", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ProjectInfoDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/client/myProjects",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProjectInfoDTO>> getProjectsByClient();


    @Operation(summary = "Get projects where I have made an offer", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ProjectInfoDTO.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/freelancer/getProjectsWhereIHaveOffer",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProjectInfoDTO>> getProjectsByOfferFreelancer();


    @Operation(summary = "Get user by email", description = "", tags={ "Super Admin Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProfileDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/super/user",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProfileDTO> getUserByEmail(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "email", required = true) String email);


    @Operation(summary = "Modify client profile", description = "", tags={ "Users Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProfileDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/users/modifyClientProfile",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ProfileDTO> modifyClientProfile(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ModifyClientProfileDTO body);


    @Operation(summary = "Modify freelancer profile", description = "", tags={ "Users Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProfileDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/users/modifyFreelancerProfile",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ProfileDTO> modifyFreelancerProfile(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ModifyFreelancerProfileDTO body);


    @Operation(summary = "Login user with firebase token and create session cookie", description = "", tags={ "Session Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/session/login",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> sessionLogin();


    @Operation(summary = "Logout user and delete session cookie", description = "", tags={ "Session Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/session/logout",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> sessionLogout();


    @Operation(summary = "Logout user everywhere and delete session cookie", description = "", tags={ "Session Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/session/logout-everywhere",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> sessionLogoutEverywhere();


    @Operation(summary = "Submit offer", description = "", tags={ "Projects Endpoints" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ProjectInfoDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/api/secured/projects/freelancer/submitOffer",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ProjectInfoDTO> submitOffer(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody SubmitOfferDTO body);

}

