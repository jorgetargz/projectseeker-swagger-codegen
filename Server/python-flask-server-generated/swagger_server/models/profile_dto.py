# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProfileDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, firebase_id: str=None, name: str=None, email: str=None, phone: str=None, active_role: str=None, title: str=None, description: str=None, availability: str=None, rating: float=None, skills: List[str]=None):  # noqa: E501
        """ProfileDTO - a model defined in Swagger

        :param id: The id of this ProfileDTO.  # noqa: E501
        :type id: str
        :param firebase_id: The firebase_id of this ProfileDTO.  # noqa: E501
        :type firebase_id: str
        :param name: The name of this ProfileDTO.  # noqa: E501
        :type name: str
        :param email: The email of this ProfileDTO.  # noqa: E501
        :type email: str
        :param phone: The phone of this ProfileDTO.  # noqa: E501
        :type phone: str
        :param active_role: The active_role of this ProfileDTO.  # noqa: E501
        :type active_role: str
        :param title: The title of this ProfileDTO.  # noqa: E501
        :type title: str
        :param description: The description of this ProfileDTO.  # noqa: E501
        :type description: str
        :param availability: The availability of this ProfileDTO.  # noqa: E501
        :type availability: str
        :param rating: The rating of this ProfileDTO.  # noqa: E501
        :type rating: float
        :param skills: The skills of this ProfileDTO.  # noqa: E501
        :type skills: List[str]
        """
        self.swagger_types = {
            'id': str,
            'firebase_id': str,
            'name': str,
            'email': str,
            'phone': str,
            'active_role': str,
            'title': str,
            'description': str,
            'availability': str,
            'rating': float,
            'skills': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'firebase_id': 'firebaseId',
            'name': 'name',
            'email': 'email',
            'phone': 'phone',
            'active_role': 'activeRole',
            'title': 'title',
            'description': 'description',
            'availability': 'availability',
            'rating': 'rating',
            'skills': 'skills'
        }
        self._id = id
        self._firebase_id = firebase_id
        self._name = name
        self._email = email
        self._phone = phone
        self._active_role = active_role
        self._title = title
        self._description = description
        self._availability = availability
        self._rating = rating
        self._skills = skills

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProfileDTO of this ProfileDTO.  # noqa: E501
        :rtype: ProfileDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ProfileDTO.


        :return: The id of this ProfileDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ProfileDTO.


        :param id: The id of this ProfileDTO.
        :type id: str
        """

        self._id = id

    @property
    def firebase_id(self) -> str:
        """Gets the firebase_id of this ProfileDTO.


        :return: The firebase_id of this ProfileDTO.
        :rtype: str
        """
        return self._firebase_id

    @firebase_id.setter
    def firebase_id(self, firebase_id: str):
        """Sets the firebase_id of this ProfileDTO.


        :param firebase_id: The firebase_id of this ProfileDTO.
        :type firebase_id: str
        """

        self._firebase_id = firebase_id

    @property
    def name(self) -> str:
        """Gets the name of this ProfileDTO.


        :return: The name of this ProfileDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProfileDTO.


        :param name: The name of this ProfileDTO.
        :type name: str
        """

        self._name = name

    @property
    def email(self) -> str:
        """Gets the email of this ProfileDTO.


        :return: The email of this ProfileDTO.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ProfileDTO.


        :param email: The email of this ProfileDTO.
        :type email: str
        """

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this ProfileDTO.


        :return: The phone of this ProfileDTO.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this ProfileDTO.


        :param phone: The phone of this ProfileDTO.
        :type phone: str
        """

        self._phone = phone

    @property
    def active_role(self) -> str:
        """Gets the active_role of this ProfileDTO.


        :return: The active_role of this ProfileDTO.
        :rtype: str
        """
        return self._active_role

    @active_role.setter
    def active_role(self, active_role: str):
        """Sets the active_role of this ProfileDTO.


        :param active_role: The active_role of this ProfileDTO.
        :type active_role: str
        """

        self._active_role = active_role

    @property
    def title(self) -> str:
        """Gets the title of this ProfileDTO.


        :return: The title of this ProfileDTO.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this ProfileDTO.


        :param title: The title of this ProfileDTO.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this ProfileDTO.


        :return: The description of this ProfileDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProfileDTO.


        :param description: The description of this ProfileDTO.
        :type description: str
        """

        self._description = description

    @property
    def availability(self) -> str:
        """Gets the availability of this ProfileDTO.


        :return: The availability of this ProfileDTO.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability: str):
        """Sets the availability of this ProfileDTO.


        :param availability: The availability of this ProfileDTO.
        :type availability: str
        """

        self._availability = availability

    @property
    def rating(self) -> float:
        """Gets the rating of this ProfileDTO.


        :return: The rating of this ProfileDTO.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this ProfileDTO.


        :param rating: The rating of this ProfileDTO.
        :type rating: float
        """

        self._rating = rating

    @property
    def skills(self) -> List[str]:
        """Gets the skills of this ProfileDTO.


        :return: The skills of this ProfileDTO.
        :rtype: List[str]
        """
        return self._skills

    @skills.setter
    def skills(self, skills: List[str]):
        """Sets the skills of this ProfileDTO.


        :param skills: The skills of this ProfileDTO.
        :type skills: List[str]
        """

        self._skills = skills
